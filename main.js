/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TodoistIndicatorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  todoistProperty: "todoist",
  projectsFolderPrefix: "1.Projects/",
  projectTag: "#project",
  RequireProjectTag: true,
  tdiSetting: "default",
  projectFileCache: {}
};
function getFrontMatter(markdownString) {
  const frontMatterMatch = markdownString.match(/^---\n([\s\S]*?)\n---/);
  if (frontMatterMatch) {
    const yamlContent = frontMatterMatch[1];
    return (0, import_obsidian.parseYaml)(yamlContent);
  }
  return null;
}
var findTodoistProperty = (string, todoistProperty) => {
  const frontMatter = getFrontMatter(string);
  return checkTodoistPropertyHasValue(frontMatter, todoistProperty);
};
function checkTodoistPropertyHasValue(frontMatter, todoistPropertyName) {
  if (frontMatter && frontMatter.hasOwnProperty(todoistPropertyName)) {
    const value = frontMatter[todoistPropertyName];
    if (typeof value === "string" && value.trim() !== "") {
      return true;
    }
  }
  return false;
}
var clearAllBadges = (fileItem) => {
  fileItem.coverEl.removeClass("todoist-indicator");
};
var paintFileBadge = function(opts, fileItem) {
  const slashes = fileItem.file.path.match(/\//g);
  const fileInFolder = slashes ? slashes.length >= 1 : 0;
  const folderItem = this.app.workspace.getLeavesOfType("file-explorer")[0].view.fileItems[fileItem.file.parent.path];
  const { TodoistLink } = opts || {};
  if (!TodoistLink) {
    fileItem.coverEl.addClass("todoist-indicator");
    if (fileInFolder) {
      folderItem.coverEl.addClass("todoist-indicator");
    }
  } else {
    clearAllBadges(fileItem);
    if (fileInFolder) {
      clearAllBadges(folderItem);
    }
  }
};
function containsTag(file, tag) {
  if (file) {
    const tags = (0, import_obsidian.getAllTags)(app.metadataCache.getFileCache(file));
    return tags.includes(tag);
  } else {
    return false;
  }
}
var TodoistIndicatorPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.isProjectFile = (filename) => {
      let hasProjectTag = false;
      const file = this.app.vault.getFileByPath(filename);
      if (file != "Not a file") {
        hasProjectTag = containsTag.call(this, file, this.settings.projectTag);
      }
      if (Boolean(this.settings.RequireProjectTag)) {
        return filename.startsWith(this.settings.projectsFolderPrefix) && filename.endsWith(".md") && !filename.includes("/_") && hasProjectTag;
      } else {
        return filename.startsWith(this.settings.projectsFolderPrefix) && filename.endsWith(".md") && !filename.includes("/_");
      }
    };
    this.scheduleRepaintBadge = (path, clearAll) => {
      window.setTimeout(() => {
        var _a, _b, _c;
        const leaves = this.app.workspace.getLeavesOfType("file-explorer");
        if ((_c = (_b = (_a = leaves == null ? void 0 : leaves[0]) == null ? void 0 : _a.view) == null ? void 0 : _b.fileItems) == null ? void 0 : _c[path]) {
          if (clearAll)
            clearAllBadges(leaves[0].view.fileItems[path]);
          else
            paintFileBadge.call(this, this.settings.projectFileCache[path], leaves[0].view.fileItems[path]);
        }
      });
    };
    this.updateFileCacheAndMaybeRepaintBadge = async ({ path, stat, deleted }, originalFilename) => {
      if (deleted || !this.isProjectFile(path)) {
        delete this.settings.projectFileCache[path];
        delete this.settings.projectFileCache[originalFilename];
        await this.saveSettings();
        return this.scheduleRepaintBadge(path, true);
      }
      if (!deleted) {
        const string = await this.app.vault.cachedRead(this.app.vault.getAbstractFileByPath(path));
        const { TodoistLink } = this.settings.projectFileCache[path] || {};
        this.settings.projectFileCache[path] = this.settings.projectFileCache[path] || {};
        this.settings.projectFileCache[path].mtime = stat.mtime;
        this.settings.projectFileCache[path].TodoistLink = findTodoistProperty(string, this.todoistProperty);
        await this.saveSettings();
        if (this.settings.projectFileCache[path].TodoistLink !== TodoistLink) {
          this.scheduleRepaintBadge(path);
        }
      }
    };
    this.refreshAllFileBadges = async () => {
      var _a;
      const projectFilesList = this.app.vault.getMarkdownFiles().filter((f) => this.isProjectFile(f.path));
      const filesMap = {};
      let needToSave = false;
      for (const tFile of projectFilesList) {
        filesMap[tFile.path] = this.settings.projectFileCache[tFile.path] || {
          mtime: tFile.stat.mtime
        };
        const lastCache = this.settings.projectFileCache[tFile.path];
        if (tFile.stat.mtime > (lastCache ? lastCache.mtime : 0)) {
          needToSave = true;
          const string = await this.app.vault.cachedRead(tFile);
          filesMap[tFile.path].TodoistLink = findTodoistProperty(string, this.todoistProperty);
        }
      }
      for (const path in this.settings.projectFileCache)
        if (!filesMap[path])
          needToSave = true;
      if (needToSave) {
        this.settings.projectFileCache = filesMap;
        await this.saveSettings();
      }
      const leaves = this.app.workspace.getLeavesOfType("file-explorer");
      if (leaves == null ? void 0 : leaves.length) {
        const fileItems = ((_a = leaves[0].view) == null ? void 0 : _a.fileItems) || {};
        for (const f in fileItems)
          if (this.isProjectFile(f)) {
            try {
              paintFileBadge.call(this, filesMap[f], fileItems[f]);
            } catch (error) {
              console.error(`Error painting badge for file: ${f}`, error);
            }
          }
      }
    };
    this.initialize = () => {
      this.refreshAllFileBadges().catch((error) => {
        console.error('Unexpected error in "todoist-indicator" plugin initialization.', error);
      });
    };
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new SettingTab(this.app, this));
    this.todoistProperty = this.settings.todoistProperty;
    const handleEvent = (event, originalFilename) => {
      if (!this.isProjectFile(event.path) && (!originalFilename || !this.isProjectFile(originalFilename)))
        return;
      this.updateFileCacheAndMaybeRepaintBadge(event, originalFilename).catch((error) => {
        console.error("Error while handling event!", error);
      });
    };
    this.registerEvent(this.app.vault.on("delete", handleEvent));
    this.registerEvent(this.app.vault.on("rename", handleEvent));
    this.registerEvent(this.app.vault.on("modify", handleEvent));
    this.app.workspace.onLayoutReady(this.initialize.bind(this));
    this.addSettingTab(new SettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("p", { text: "Please reload Obsidian after changing these settings for them to take effect." });
    new import_obsidian.Setting(containerEl).setName("Projects folder").setDesc('The folder where project files live, e.g. "Projects/".').addText(
      (text) => text.setPlaceholder(DEFAULT_SETTINGS.projectsFolderPrefix).setValue(this.plugin.settings.projectsFolderPrefix).onChange(async (value) => {
        this.plugin.settings.projectsFolderPrefix = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Todoist tag").setDesc("The tag that indicates Todoist link.").addText(
      (text) => text.setPlaceholder(DEFAULT_SETTINGS.todoistProperty).setValue(this.plugin.settings.todoistProperty).onChange(async (value) => {
        this.plugin.settings.todoistProperty = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Require project tag?").setDesc("With this setting enabled, badges will only appear on files (and their containing folder) with the project tag.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.RequireProjectTag).onChange(async (value) => {
        this.plugin.settings.RequireProjectTag = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Project tag").setDesc("The tag that indicates a file is a project file (handy in case you store project related files in a project folder).").addText(
      (text) => text.setPlaceholder(DEFAULT_SETTINGS.projectTag).setValue(this.plugin.settings.projectTag).onChange(async (value) => {
        this.plugin.settings.projectTag = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
